// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Plan {
  STANDARD
  PREMIUM
  ENTERPRISE
}

model User {
  id           String       @id @default(uuid())
  fullName     String
  email        String       @unique
  password     String
  avatar       String?
  role         Role
  plan         Plan
  refreshToken String?
  courses      Course[]     @relation("CourseCreator")
  enrollments  Enrollment[]
  submissions  Submission[]
  analytics    Analytics[]
  createdAt    DateTime     @default(now())
  deletedAt    DateTime?
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String
  plan        Plan         @default(STANDARD)
  createdAt   DateTime     @default(now())
  creator     User         @relation("CourseCreator", fields: [creatorId], references: [id])
  creatorId   String
  lessons     Lesson[]
  enrollments Enrollment[]
  deletedAt   DateTime?
}

model Enrollment {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  is_approved     Boolean   @default(false)
  course          Course    @relation(fields: [courseId], references: [id])
  courseId        String
  enrolledAt      DateTime  @default(now())
  deletedAt       DateTime?
  overallProgress Float?

  LessonProgress LessonProgress[]
}

model Lesson {
  id        String    @id @default(uuid())
  title     String
  content   String
  course    Course    @relation(fields: [courseId], references: [id])
  courseId  String
  url       String?
  homework  Homework?
  test      Test?
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  LessonProgress LessonProgress[]
}

model Homework {
  id          String       @id @default(uuid())
  title       String
  content     String
  lesson      Lesson       @relation(fields: [lessonId], references: [id])
  lessonId    String       @unique
  submissions Submission[]
  deletedAt   DateTime?
}

model Test {
  id          String       @id @default(uuid())
  title       String
  lesson      Lesson       @relation(fields: [lessonId], references: [id])
  lessonId    String       @unique
  submissions Submission[]
  deletedAt   DateTime?
  questions   Question[]
}

model Question {
  id       String    @id @default(uuid())
  text     String
  test     Test      @relation(fields: [testId], references: [id])
  testId   String
  variants Variant[]
}

model Variant {
  id         String   @id @default(uuid())
  text       String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Submission {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  homework       Homework? @relation(fields: [homeworkId], references: [id])
  homeworkId     String?
  test           Test?     @relation(fields: [testId], references: [id])
  testId         String?
  content        String?
  testAnswers    Json?
  score          Float?
  score_homework Float?
  passed         Boolean?
  score_test     Float?
  submittedAt    DateTime  @default(now())
  deletedAt      DateTime?
}

model Analytics {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  action    String
  metadata  Json
  timestamp DateTime  @default(now())
  deletedAt DateTime?
}

model AdminAnalyticsSnapshot {
  id              String   @id @default(uuid())
  date            DateTime @default(now())
  plan            Plan
  userCount       Int
  courseCount     Int
  lessonCount     Int
  submissionCount Int
}

model LessonProgress {
  id           String     @id @default(uuid())
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId String
  lesson       Lesson     @relation(fields: [lessonId], references: [id])
  lessonId     String

  isCompleted Boolean   @default(false)
  testScore   Float? // процент за тест
  unlockedAt  DateTime? // дата, когда урок открылся
  completedAt DateTime? // дата, когда урок пройден

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([enrollmentId, lessonId])
}
