generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  CLIENT
}

enum MainCategory {
  BOYS
  GIRLS
  BABIES
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Category {
  id        String    @id @default(uuid())
  label_en  String
  label_ru  String
  label_kk  String
  slug      String    @unique
  deletedAt DateTime?
  products  Product[]
}

model AgeGroup {
  id        String   @id @default(uuid())
  label_en  String
  label_ru  String
  label_kk  String
  products  Product[]
}

model Size {
  id        String           @id @default(uuid())
  label_en  String
  label_ru  String
  label_kk  String
  variants  ProductVariant[]
}

model Color {
  id        String           @id @default(uuid())
  label_en  String
  label_ru  String
  label_kk  String
  hex       String?
  variants  ProductVariant[]
}


model Product {
  id          String           @id @default(uuid())
  name        String
  slug        String           @unique
  description String?
  ageGroupId  String
  categoryId  String
  brand       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  category    Category         @relation(fields: [categoryId], references: [id])
  ageGroup    AgeGroup         @relation(fields: [ageGroupId], references: [id])
  variants    ProductVariant[]
  images      ProductImage[]
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  url       String
  alt       String?
  position  Int
  isPrimary Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id         String      @id @default(uuid())
  productId  String
  sizeId     String
  colorId    String
  price      Float
  stock      Int
  sku        String      @unique
  deletedAt  DateTime?
  product    Product     @relation(fields: [productId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  color      Color       @relation(fields: [colorId], references: [id])
  orderItems OrderItem[]
}

model User {
  id           String    @id @default(uuid())
  phone        String    @unique
  password     String
  fullName     String
  email        String?   @unique
  companyName  String?
  refreshToken String?
  lastLogin    DateTime?
  address      String?
  city         String?
  region       String?
  role         Role      @default(CLIENT)
  isActive     Boolean   @default(true)
  deletedAt    DateTime? // for soft delete
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  orders       Order[]
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id               String         @id @default(uuid())
  orderId          String
  productVariantId String
  quantity         Int
  unitPrice        Float
  order            Order          @relation(fields: [orderId], references: [id])
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}
