// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  CLIENT
}

model Product {
  id          String    @id @default(uuid())
  name        String
  slug        String           @unique
  description String?
  age_group   String // e.g. "0-3 months", "3-6 months", "1-2 years"
  categoryId  String
  brand       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    Category         @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  images      ProductImage[]
}

model ProductImage {
  id        String    @id @default(uuid())
  productId String
  url       String
  alt       String? // alt text for accessibility
  position  Int // ordering (1 = first, etc.)
  isPrimary Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
}

enum MainCategory {
  BOYS
  GIRLS
  BABIES
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products Product[]
}

model User {
  id           String    @id @default(uuid())
  phone        String    @unique
  password     String
  fullName     String
  email        String?   @unique
  companyName  String?
  refreshToken String?
  lastLogin    DateTime?
  address      String?
  city         String?
  region       String?
  role         Role      @default(CLIENT)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  orders       Order[]
}

model ProductVariant {
  id         String    @id @default(uuid())
  productId  String
  size       String // e.g., "56", "62", "S", "M"
  color      String
  price      Float
  stock      Int // how many in stock
  sku        String      @unique
  product    Product     @relation(fields: [productId], references: [id])
  orderItems OrderItem[]
}

model Order {
  id        String    @id @default(uuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  User      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id               String    @id @default(uuid())
  orderId          String
  productVariantId String
  quantity         Int
  unitPrice        Float
  order            Order          @relation(fields: [orderId], references: [id])
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
